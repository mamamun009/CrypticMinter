{"version":3,"file":"static/js/682.e3aed3b7.chunk.js","mappings":"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","sources":["../node_modules/@headlessui/react/src/components/description/description.tsx","../node_modules/@headlessui/react/src/hooks/use-focus-trap.ts","../node_modules/@headlessui/react/src/hooks/use-inert-others.ts","../node_modules/@headlessui/react/src/internal/portal-force-root.tsx","../node_modules/@headlessui/react/src/components/portal/portal.tsx","../node_modules/@headlessui/react/src/internal/stack-context.tsx","../node_modules/@headlessui/react/src/components/dialog/dialog.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet DescriptionContext = createContext<\n  ({ register(value: string): () => void } & SharedData) | null\n>(null)\n\nfunction useDescriptionContext() {\n  let context = useContext(DescriptionContext)\n  if (context === null) {\n    let err = new Error(\n      'You used a <Description /> component, but it is not inside a relevant parent.'\n    )\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDescriptionContext)\n    throw err\n  }\n  return context\n}\n\ninterface DescriptionProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useDescriptions(): [\n  string | undefined,\n  (props: DescriptionProviderProps) => JSX.Element\n] {\n  let [descriptionIds, setDescriptionIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined\n    descriptionIds.length > 0 ? descriptionIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function DescriptionProvider(props: DescriptionProviderProps) {\n        let register = useCallback((value: string) => {\n          setDescriptionIds(existing => [...existing, value])\n\n          return () =>\n            setDescriptionIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return (\n          <DescriptionContext.Provider value={contextBag}>\n            {props.children}\n          </DescriptionContext.Provider>\n        )\n      }\n    }, [setDescriptionIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTION_TAG = 'p' as const\ninterface DescriptionRenderPropArg {}\ntype DescriptionPropsWeControl = 'id'\n\nexport function Description<TTag extends ElementType = typeof DEFAULT_DESCRIPTION_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let context = useDescriptionContext()\n  let id = `headlessui-description-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let passThroughProps = props\n  let propsWeControl = { ...context.props, id }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot: context.slot || {},\n    defaultTag: DEFAULT_DESCRIPTION_TAG,\n    name: context.name || 'Description',\n  })\n}\n","import {\n  useRef,\n  // Types\n  MutableRefObject,\n  useEffect,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { useWindowEvent } from './use-window-event'\nimport { useIsMounted } from './use-is-mounted'\n\nexport enum Features {\n  /** No features enabled for the `useFocusTrap` hook. */\n  None = 1 << 0,\n\n  /** Ensure that we move focus initially into the container. */\n  InitialFocus = 1 << 1,\n\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n  TabLock = 1 << 2,\n\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n  FocusLock = 1 << 3,\n\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n  RestoreFocus = 1 << 4,\n\n  /** Enable all features. */\n  All = InitialFocus | TabLock | FocusLock | RestoreFocus,\n}\n\nexport function useFocusTrap(\n  container: MutableRefObject<HTMLElement | null>,\n  features: Features = Features.All,\n  {\n    initialFocus,\n    containers,\n  }: {\n    initialFocus?: MutableRefObject<HTMLElement | null>\n    containers?: MutableRefObject<Set<MutableRefObject<HTMLElement | null>>>\n  } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useIsMounted()\n\n  let featuresRestoreFocus = Boolean(features & Features.RestoreFocus)\n  let featuresInitialFocus = Boolean(features & Features.InitialFocus)\n\n  // Capture the currently focused element, before we enable the focus trap.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    restoreElement.current = document.activeElement as HTMLElement\n  }, [featuresRestoreFocus])\n\n  // Restore the focus when we unmount the component.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    return () => {\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n    }\n  }, [featuresRestoreFocus])\n\n  // Handle initial focus\n  useEffect(() => {\n    if (!featuresInitialFocus) return\n    if (!container.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (initialFocus?.current) {\n      if (initialFocus?.current === activeElement) {\n        previousActiveElement.current = activeElement\n        return // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement\n      return // Already focused within Dialog\n    }\n\n    // Try to focus the initialFocus ref\n    if (initialFocus?.current) {\n      focusElement(initialFocus.current)\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        console.warn('There are no focusable elements inside the <FocusTrap />')\n      }\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n  }, [container, initialFocus, featuresInitialFocus])\n\n  // Handle `Tab` & `Shift+Tab` keyboard events\n  useWindowEvent('keydown', event => {\n    if (!(features & Features.TabLock)) return\n\n    if (!container.current) return\n    if (event.key !== Keys.Tab) return\n\n    event.preventDefault()\n\n    if (\n      focusIn(\n        container.current,\n        (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n      ) === FocusResult.Success\n    ) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n    }\n  })\n\n  // Prevent programmatically escaping the container\n  useWindowEvent(\n    'focus',\n    event => {\n      if (!(features & Features.FocusLock)) return\n\n      let allContainers = new Set(containers?.current)\n      allContainers.add(container)\n\n      if (!allContainers.size) return\n\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(allContainers, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    },\n    true\n  )\n}\n\nfunction contains(containers: Set<MutableRefObject<HTMLElement | null>>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.current?.contains(element)) return true\n  }\n\n  return false\n}\n","import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n","import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  // Ensure the portal root is always in the DOM\n  useEffect(() => {\n    if (target === null) return\n\n    if (!document.body.contains(target)) {\n      document.body.appendChild(target)\n    }\n  }, [target])\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Handle `Escape` to close\n  useWindowEvent('keydown', event => {\n    if (event.key !== Keys.Escape) return\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    event.preventDefault()\n    event.stopPropagation()\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (event.target !== event.currentTarget) return\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n"],"names":["DescriptionContext","createContext","useDescriptionContext","context","useContext","err","Error","useDescriptions","useState","descriptionIds","setDescriptionIds","useMemo","props","register","useCallback","existing","clone","idx","contextBag","slot","name","value","Description","id","useId","useIsoMorphicEffect","passThroughProps","propsWeControl","render","defaultTag","Features","useFocusTrap","container","features","All","initialFocus","containers","restoreElement","useRef","window","document","previousActiveElement","mounted","useIsMounted","featuresRestoreFocus","Boolean","featuresInitialFocus","useEffect","focusElement","activeElement","focusIn","Focus","FocusResult","console","useWindowEvent","event","Keys","allContainers","Set","previous","toElement","contains","interactables","originals","inert","element","restore","original","ForcePortalRootContext","ForcePortalRoot","force","usePortalTarget","forceInRoot","groupTarget","existingRoot","root","target","setTarget","DEFAULT_PORTAL_TAG","Portal","passthroughProps","ready","useServerHandoffComplete","createPortal","DEFAULT_GROUP_TAG","PortalGroupContext","StackMessage","StackContext","StackProvider","children","onUpdate","type","parentUpdate","notify","args","DialogStates","ActionTypes","reducers","state","action","titleId","DialogContext","useDialogContext","component","Dialog","stateReducer","match","DialogRenderFeatures","DialogRoot","forwardRefWithAs","open","onClose","rest","nestedDialogCount","setNestedDialogCount","usesOpenClosedState","useOpenClosed","State","internalDialogRef","dialogRef","useSyncRefs","hasOpen","hasOnClose","dialogState","visible","useReducer","descriptionId","dispatch","close","setTitleId","enabled","hasNestedDialogs","hasParentDialog","position","parent","FocusTrapFeatures","leaf","child","interactable","useInertOthers","overflow","paddingRight","scrollbarWidth","observer","IntersectionObserver","entries","entry","describedby","DescriptionProvider","Open","ref","role","onClick","message","Add","count","Remove","React","Group","Overlay","overlayRef","handleClick","isDisabledReactIssue7711","Object","Title"],"sourceRoot":""}